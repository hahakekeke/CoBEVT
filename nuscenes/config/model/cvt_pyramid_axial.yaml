_target_: cross_view_transformer.model.cvt.CrossViewTransformer

dim_last: 64

outputs:
  bev: [0, 1]

encoder:
  _target_: cross_view_transformer.model.encoder_pyramid_axial.PyramidAxialEncoder

  dim: [32, 64, 128]
  scale: 1.0
  middle: [2, 2, 2]

  backbone:
    _target_: cross_view_transformer.model.backbones.efficientnet.EfficientNetExtractor

    model_name: efficientnet-b4
    layer_names: ['reduction_2', 'reduction_3', 'reduction_4']
    image_height: ${data.image.h}
    image_width: ${data.image.w}


  # --- (추가된 부분) 고성능 백본 설정 ---
  high_perf_backbone:
    _target_: cross_view_transformer.model.backbones.efficientnet.EfficientNetExtractor

    # b4보다 더 성능이 좋은 b7을 고성능 백본으로 지정 (예시)
    model_name: efficientnet-b7
    layer_names: ['reduction_2', 'reduction_3', 'reduction_4'] # 호환성을 위해 동일하게 유지
    image_height: ${data.image.h}
    image_width: ${data.image.w}

  self_attn:
    dim_head: 32
    dropout: 0.1
    window_size: 25

  cross_view:
    heads: [1, 2, 4]
    dim_head: [32, 32, 32]
    qkv_bias: True
    skip: True
    no_image_features: False

    image_height: ${data.image.h}
    image_width: ${data.image.w}

  cross_view_swap:
    rel_pos_emb: False
    q_win_size: [[ 10, 10 ], [ 10, 10 ], [ 25, 25 ]  ]
    feat_win_size: [ [ 6, 12 ], [ 6, 12 ], [ 14, 30 ]]
    bev_embedding_flag: [ true, false, false ]

  bev_embedding:
    sigma: 1.0

    bev_height: ${data.bev.h}
    bev_width: ${data.bev.w}
    h_meters: ${data.bev.h_meters}
    w_meters: ${data.bev.w_meters}
    offset: ${data.bev.offset}

    upsample_scales: [2, 4, 8]

decoder:
  _target_: cross_view_transformer.model.decoder.Decoder

  dim: 128
  blocks: [128, 128, 64]
  residual: True
  factor: 2
